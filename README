The goal of the BioScala project is to create a scalable and functional
bioinformatics library; which can be used from Scala, Java, JRuby,
Jython and Clojure; building on existing libraries available on the JAVA
Virtual Machine (JVM), including BioJAVA and BioRuby.

This is the place for the BioScala project under the liberal BSD license.

See also the Tutorial

  http://thebird.nl/bioscala/bioscala-tutorial.html 


design docs

  http://thebird.nl/bioscala/bioscala-design.html. 

and API docs

  http://thebird.nl/bioscala/api/

This edition of BioScala has:

  - Strongly typed DNA, RNA Sequence, gapped and IUPAC ambiguous Sequence
  - Sequences contain lists of Nucleotide, AminoAcid, IUPAC, Gapped, Codon
  - Flexible Sequence user defined attributes
  - Transcription of DNA to RNA
  - Translation of (ambiguous) RNA to AA (using BioJava3)
  - Formats:
	  . Iterator based FASTA reader and writer
    . Iterator based PAML (PHY) file format reader
    . Phylip reader/writer (using BioJava)
  - Alignments and attributes (work in progress)
  - A translation example of calling into BioRuby
  - A tutorial in ./doc/tutorial.txt

BioScala uses the simple build tool (sbt) and behaviour driven development/unit
testing. See the INSTALL file for more information.

Please fork from https://github.com/bioscala/bioscala 

Pjotr Prins

Mailing list: http://lists.thebird.nl/listinfo.cgi/bioscala-thebird.nl


= INSTALL BioScala =

It is rather easy to install a working repository of BioScala. The JVM is
needed and sbt (simple build tool).

First download BioScala from github with:

  git clone http://github.com/bioscala/bioscala.git

Install Java. On Debian, for example:

  apt-get install sun-java6-jdk

Install sbt (Simple build tool) from

  http://code.google.com/p/simple-build-tool/wiki/Setup.

Install sbt and run it on the command line, for example

  # go to base bioscala directory
  cd bioscala
  # launch sbt
  java -Xmx512M -jar sbt-launch.jar
  # inside sbt type
  > update
  > compile
  > test

sbt will automatically download Scala and related jars. Then it will compile
and run the supplied tests. When running sbt from the command line in the base
dir